syntax = "proto3";

package models;
option go_package = "github.com/megacoder/go-app-tickerwall/models";

// Leader is the exposed endpoint(s) for the leader service.
service Leader {
    // Join the screen cluster. Updates to the cluster will be streamed to clients.
    rpc JoinCluster(Screen) returns (stream Update) {}

    // Get our current list of tickers.
    rpc GetTickers(Empty) returns (Tickers) {}

    // Update our presentation settings.
    rpc UpdatePresentationSettings(PresentationSettings) returns (PresentationSettings) {}

    // Announce a new message
    rpc Announce(Announcement) returns (Announcement) {}

    // Get our current screen cluster.
    rpc GetScreenCluster(Empty) returns (ScreenCluster) {}

    // UpdateScreen allows a screen to update it's details after it's started and joined.
    rpc UpdateScreen(Screen) returns (Screen) {}
}

// Ticker is used to update a tickers information ( leader -> follower ).
message Ticker {
    string Ticker                   = 1;
    string CompanyName              = 2;
    int64 OutstandingShares         = 3;
    double Price                    = 4;
    double MarketCap                = 5;
    double PriceChangePercentage    = 6;
    double PreviousClosePrice       = 7;
    int32 Index                     = 8;
    int32 Img                       = 9;
    bytes ImgData                   = 10;
    repeated Agg Aggs               = 11;
}

// Agg is an individual aggregate used to generate graphs.
message Agg {
    double Price        = 1;
    int32 Volume        = 2;
    int64 Timestamp     = 3;
}

// PriceUpdate is the message sent when a price updates for a ticker.
message PriceUpdate {
    string Ticker   = 1;
    double Price    = 2;
}

// Announcement is used to display a special message on the display.
message Announcement {
    string Message              = 1;
    int32 AnnouncementType      = 2;
    int64 ShowAtTimestampMS     = 3;
    int64 LifespanMS            = 4;
    int32 Animation             = 5;
}

// Screen contains all screen information about an individual screen.
message Screen {
    string UUID     = 1;
    int32 Width     = 2;
    int32 Height    = 3;
    int32 Index     = 4;
}

// ScreenCluster contains information about the whole screen cluster.
message ScreenCluster {
    PresentationSettings Settings   = 1;
    repeated Screen Screens         = 2;
}

message PresentationSettings {
    int32 TickerBoxWidth        = 1;
    int32 ScrollSpeed           = 2;
    RGBA UpColor                = 3;
    RGBA DownColor              = 4;
    RGBA BGColor                = 5;
    RGBA FontColor              = 6;
    RGBA TickerBoxBGColor       = 7;
    bool ShowLogos              = 8;
    bool ShowFPS                = 9;
    int32 AnimationDurationMS   = 10;
    bool PerTickUpdates         = 11;
}

// Update encapsulates different update messages.
message Update {
    int32 UpdateType                           = 1;
    PriceUpdate PriceUpdate                    = 2;
    Announcement Announcement                  = 3;
    ScreenCluster ScreenCluster                = 4;
    Ticker Ticker                              = 5;
    PresentationSettings PresentationSettings  = 6;
}

// RGBA is how we represent colors.
message RGBA {
    int32 Red       = 1;
    int32 Green     = 2;
    int32 Blue      = 3;
    int32 Alpha     = 4;
}


// Group of Tickers
message Tickers {
    repeated Ticker Tickers = 1;
}
message Empty {} // service has no input
